from datetime import date, datetime
from typing import Tuple
import argparse
import json

from espn_api import requests
from espn_api.hockey import League


def get_args():
    parser = argparse.ArgumentParser(description='Get credential values by loging into espn league, inspect page, '
                                                 'Application tab -> Storage -> Cookies -> "http://fantasy.espn.com". '
                                                 'Find required values in the list.')
    parser.add_argument('--league_id', type=int, help='Id of the fantasy league', required=True)
    parser.add_argument('--espn_s2', type=str, help='expn_s2 credentials value', required=True)
    parser.add_argument('--swid', type=str, help='swid credentials value', required=True)
    return parser.parse_args()


def get_league_config(_league_id) -> dict:
    """
    Return config for provided league
    :param int _league_id: ID of the espn league. League must be setup with 'init-new-league.py' prior to this.
    """
    with open('espn-data/{}/league-config.json'.format(_league_id)) as _f:
        return json.load(_f)


def get_years() -> list:
    """
    Generate a list of years to get data about players for.
    It starts at 2019 due to the fact that current API does not support earlier years.
    """
    init_year = 2019
    current_year = date.today().year
    current_month = date.today().month

    # next year season is generated by espn somewhere in August
    # predictions for the next season are generated by espn somewhere in September
    # hence the range offset, otherwise if run during Jan - July
    # it would try to request data for the year that does not exist
    offset = 2
    if current_month in range(1, 7):
        offset = 1

    ret = list(range(init_year, current_year+offset))
    # need to reverse the range, as current year is used as 'init' for the data schema
    # and uses players map from a current year
    ret.reverse()
    return ret


def setup_schema(_league_args) -> dict:
    """
    Returns a top level data structure (dict). Use with 'current year'.
    :param dict _league_args: Dict with values to use as **kvargs to get league info.
    :return: Dictionary with defined player ids.
    """
    league = League(**_league_args)
    schema = dict()
    schema['years'] = list()
    schema['players'] = {key: dict() for key in league.player_map.keys() if isinstance(key, int)}
    for key in schema['players']:
        schema['players'][key]['name'] = league.player_map[key]
    return schema


def get_fantasy_avg(_stats, _league_config, _is_goalie, _name) -> Tuple[float, float]:
    """
    returns fantasy avg value for players stats based on league scoring
    :param dict _stats: stats dictionary of a player.
    :param dict _league_config: League config dictionary to calculate points
    """

    def goalie_avg(_stats, _total):
        # there seems to be no cases in the data where there is total projected for the goalie while having zero starts
        return total / _stats['GS']

    def skater_avg(_stats, _total):
        games_played = 0

        try:
            games_played = _stats['GP']
        except KeyError:
            pass

        if not games_played:
            # sometimes projections data has zero for GP even though player has a projection for a season
            # assuming optimistic 78 games played a season
            games_played = 78

        return total / games_played

    # TODO missing total points vs ESPN projections
    avg = 0.0
    total = 0.0
    try:
        if _is_goalie:
            scoring = _league_config['scoring']['goaltenders']
        else:
            scoring = _league_config['scoring']['skaters']

        for key in scoring:
            if key not in _stats.keys():
                continue
            total += scoring[key] * _stats[key]

        if total:
            if _is_goalie:
                avg = skater_avg(_stats, total)
            else:
                avg = skater_avg(_stats, total)

    except Exception as ex:
        print('Processing a player "{}" has failed miserably!'.format(_name))
        print(ex)
        return 0.0, 0.0

    return avg, total


def del_key(_dict, _key):
    if _key in _dict:
        del _dict[_key]


def aggregate_data(_full_data, _league_config, _free_agents, _draft, _year) -> dict:
    debug_name = 'Calle Jarnkrok'
    for player in _free_agents:
        # TODO remove debug by name:
        if player.name == debug_name:
            print()
        try:
            is_goalie = False
            avg = 0.0
            total = 0.0
            player_dict = clean_player_dict(vars(player), _year)

            if player_dict['position'] == 'Goalie':
                is_goalie = True
            for stat in player_dict['stats']:
                # TODO remove debug by name:
                if player.name == debug_name:
                    print()
                avg, total = get_fantasy_avg(player_dict['stats'][stat]['total'], _league_config, is_goalie, player_dict['name'])
                player_dict['stats'][stat]['total']['f_avg'] = avg
                player_dict['stats'][stat]['total']['f_total'] = total
            _full_data['players'][player.playerId][_year] = player_dict
        except KeyError as ex:
            print('Looks like a player {} has retired in the latest season. Data is dropped.'.format(player.name))
            continue
    return _full_data


def clean_player_dict(_player_dict, _year) -> dict:
    tmp = dict(_player_dict)
    del_key(tmp, 'lineupSlot')
    del_key(tmp, 'eligibleSlots')
    del_key(tmp, 'acquisitionType')
    del_key(tmp, 'injuryStatus')
    del_key(tmp, 'injured')
    tmp_stats = dict(tmp['stats'])
    for stat in tmp['stats']:
        if 'Total {}'.format(_year) in stat or 'Projected {}'.format(_year) in stat:
            pass
        else:
            del_key(tmp_stats, stat)
    tmp['stats'] = dict(tmp_stats)

    return tmp


def main():
    args = get_args()
    kwargs = {
        'league_id': args.league_id,
        'espn_s2': args.espn_s2,
        'swid': args.swid
    }

    league_config = dict()
    try:
        league_config = get_league_config(kwargs['league_id'])
    except FileNotFoundError:
        print('Unable to locate configuration for League_id: {}.'
              '\nSetup with "init-new-league.py"'.format(kwargs['league_id']))
        exit(-1)

    years = get_years()
    kwargs['year'] = years[0]
    full_data = setup_schema(kwargs)
    for year in years:
        print('Getting data for year {} ...'.format(year))
        kwargs['year'] = year
        try:
            league = League(**kwargs)
            full_data['years'].append(year)
            fa = league.free_agents(size=10000)
            # TODO Debug file data

            draft = league.espn_request.get_league_draft()
            full_data = aggregate_data(full_data, league_config, fa, draft, year)

        except requests.espn_requests.ESPNAccessDenied:
            print("Logged-in user does not have access to year {}".format(year))
            pass

    with open('fa-cleaned.json', 'w') as _f:
        json.dump(full_data, _f, indent=2)

    print()


if __name__ == '__main__':
    main()



